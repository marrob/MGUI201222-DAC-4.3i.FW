/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

//Default typed text database
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x30, 0x3a, 0x20, 0x4f, 0x46, 0x46, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x3a, 0x20, 0x33, 0x32, 0x20, 0x6b, 0x48, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x3a, 0x20, 0x34, 0x34, 0x2e, 0x31, 0x20, 0x6b, 0x48, 0x7a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x33, 0x3a, 0x20, 0x34, 0x38, 0x20, 0x6b, 0x48, 0x7a, 0x0, // @0 "0: OFF          1: 32 kHz          2: 44.1 kHz          3: 48 kHz"
    0x30, 0x3a, 0x20, 0x4f, 0x46, 0x46, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x3a, 0x20, 0x53, 0x68, 0x61, 0x72, 0x70, 0x20, 0x52, 0x6f, 0x6c, 0x6c, 0x2d, 0x4f, 0x66, 0x66, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x3a, 0x53, 0x6c, 0x6f, 0x77, 0x20, 0x52, 0x6f, 0x6c, 0x6c, 0x2d, 0x4f, 0x66, 0x66, 0x0, // @66 "0: OFF          1: Sharp Roll-Off          2:Slow Roll-Off"
    0x30, 0x3a, 0x20, 0x38, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x3a, 0x20, 0x31, 0x36, 0x58, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x32, 0x3a, 0x20, 0x33, 0x32, 0x58, 0x0, // @125 "0: 8X          1: 16X          2: 32X"
    0x44, 0x53, 0x44, 0x20, 0x43, 0x75, 0x74, 0x20, 0x4f, 0x66, 0x66, 0x20, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x5b, 0x30, 0x2e, 0x2e, 0x32, 0x5d, 0x20, 0x3a, 0x20, 0x0, // @163 "DSD Cut Off Frequency [0..2] : "
    0x44, 0x65, 0x6c, 0x74, 0x61, 0x20, 0x53, 0x69, 0x67, 0x6d, 0x61, 0x20, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x5b, 0x30, 0x2e, 0x2e, 0x32, 0x5d, 0x20, 0x3a, 0x20, 0x0, // @195 "Delta Sigma Settings [0..2] : "
    0x53, 0x65, 0x74, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x20, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x20, 0xa, 0x2e, 0x0, // @226 "Set display auto sleep Time ?."
    0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x68, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x3a, 0x20, 0x20, 0x0, // @257 "Clock heated temperature :  "
    0x44, 0x65, 0x2d, 0x45, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x69, 0x73, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x5b, 0x30, 0x2e, 0x2e, 0x33, 0x5d, 0x20, 0x3a, 0x0, // @286 "De-Emphisis Filter [0..3] :"
    0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x72, 0x20, 0x5b, 0x31, 0x20, 0x6d, 0x69, 0x6e, 0x5d, 0x0, // @314 "Enable Screensaver [1 min]"
    0x42, 0x75, 0x73, 0x20, 0x55, 0x61, 0x72, 0x74, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x3a, 0x20, 0x0, // @341 "Bus Uart Error counter : "
    0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x0, // @367 "Clock Temperature ranges "
    0x32, 0x32, 0x2e, 0x35, 0x37, 0x39, 0x32, 0x20, 0x4d, 0x48, 0x7a, 0x20, 0x50, 0x4c, 0x4c, 0x20, 0x4c, 0x6f, 0x63, 0x6b, 0x20, 0x3a, 0x20, 0x20, 0x0, // @393 "22.5792 MHz PLL Lock :  "
    0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x49, 0x6e, 0x74, 0x2d, 0x45, 0x78, 0x74, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x3a, 0x20, 0x20, 0x0, // @418 "Clock Int-Ext source :  "
    0x32, 0x33, 0x2e, 0x30, 0x38, 0x2e, 0x32, 0x30, 0x32, 0x32, 0x20, 0x2d, 0x20, 0x32, 0x30, 0x2e, 0x30, 0x38, 0x2e, 0x32, 0x30, 0x32, 0x32, 0x0, // @443 "23.08.2022 - 20.08.2022"
    0x32, 0x34, 0x2e, 0x35, 0x37, 0x36, 0x30, 0x20, 0x4d, 0x48, 0x7a, 0x20, 0x50, 0x4c, 0x4c, 0x20, 0x4c, 0x6f, 0x63, 0x6b, 0x20, 0x3a, 0x20, 0x0, // @467 "24.5760 MHz PLL Lock : "
    0x4f, 0x43, 0x58, 0x4f, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x3a, 0x0, // @491 "OCXO main temperature :"
    0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x52, 0x61, 0x74, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x0, // @515 "Sampling Rate Converter"
    0x48, 0x69, 0x67, 0x68, 0x20, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x20, 0x3a, 0x20, 0x0, // @539 "High Precision mode : "
    0x54, 0x68, 0x65, 0x20, 0x50, 0x49, 0x4e, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x0, // @562 "The PIN is not correct"
    0x32, 0x34, 0x2e, 0x30, 0x30, 0x30, 0x20, 0x4d, 0x48, 0x7a, 0x20, 0x50, 0x4c, 0x4c, 0x20, 0x4c, 0x6f, 0x63, 0x6b, 0x20, 0x3a, 0x0, // @585 "24.000 MHz PLL Lock :"
    0x44, 0x53, 0x44, 0x20, 0x2d, 0x20, 0x31, 0x62, 0x69, 0x74, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x34, 0x4d, 0x48, 0x7a, 0x20, 0x0, // @607 "DSD - 1bit - 2.4MHz "
    0x54, 0x69, 0x6d, 0x65, 0x20, 0x54, 0x6f, 0x20, 0x4f, 0x66, 0x66, 0x20, 0x20, 0x2, 0x0, // @628 "Time To Off  <>"
    0x30, 0x36, 0x2e, 0x30, 0x36, 0x2e, 0x32, 0x30, 0x32, 0x32, 0x20, 0x30, 0x39, 0x3a, 0x35, 0x30, 0x3a, 0x33, 0x36, 0x0, // @643 "06.06.2022 09:50:36"
    0x46, 0x49, 0x52, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x5b, 0x30, 0x2e, 0x2e, 0x32, 0x5d, 0x20, 0x3a, 0x0, // @663 "FIR Filter [0..2] :"
    0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x3a, 0x20, 0x0, // @683 "Output Frequency : "
    0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x3a, 0x0, // @703 "Firmware version :"
    0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x42, 0x69, 0x74, 0x20, 0x44, 0x65, 0x70, 0x74, 0x68, 0x3a, 0x20, 0x0, // @722 "Output Bit Depth: "
    0x50, 0x68, 0x61, 0x73, 0x65, 0x20, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x0, // @741 "Phase Adjustment: "
    0x53, 0x77, 0x61, 0x70, 0x20, 0x4c, 0x52, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x3a, 0x20, 0x0, // @760 "Swap LR channel : "
    0x42, 0x6f, 0x6f, 0x74, 0x75, 0x70, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x3a, 0x20, 0x0, // @779 "Bootup counter : "
    0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x3a, 0x20, 0x0, // @797 "Uptime counter : "
    0x30, 0x31, 0x2e, 0x30, 0x31, 0x2e, 0x32, 0x30, 0x32, 0x32, 0x20, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x0, // @815 "01.01.2022 00:00"
    0x32, 0x31, 0x2e, 0x30, 0x36, 0x2e, 0x32, 0x30, 0x32, 0x32, 0x20, 0x32, 0x30, 0x3a, 0x33, 0x35, 0x0, // @832 "21.06.2022 20:35"
    0x44, 0x65, 0x6e, 0x70, 0x6f, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x0, // @849 "Denpo Reference"
    0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x0, // @865 "Factory profile"
    0x46, 0x61, 0x74, 0x63, 0x6f, 0x72, 0x79, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x0, // @881 "Fatcory default"
    0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x20, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x3a, 0x20, 0x0, // @897 "Volume Level : "
    0x41, 0x75, 0x64, 0x69, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x0, // @913 "Audio profiles"
    0x44, 0x61, 0x74, 0x65, 0x20, 0x3a, 0x20, 0x2, 0x0, // @928 "Date : <>"
    0x53, 0x65, 0x74, 0x20, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x0, // @937 "Set Clock time"
    0x53, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x0, // @952 "Set clock time"
    0x31, 0x37, 0x36, 0x2e, 0x34, 0x2f, 0x31, 0x39, 0x32, 0x20, 0x6b, 0x48, 0x7a, 0x0, // @967 "176.4/192 kHz"
    0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x3a, 0x20, 0x0, // @981 "Brightness : "
    0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x41, 0x53, 0x52, 0x43, 0x20, 0x3a, 0x0, // @995 "Enable ASRC :"
    0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x61, 0x74, 0x65, 0x0, // @1009 "Current date"
    0x44, 0x65, 0x62, 0x75, 0x67, 0x20, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x0, // @1022 "Debug screen"
    0x50, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x0, // @1035 "Please enter"
    0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x0, // @1048 "Select Input"
    0x55, 0x73, 0x65, 0x72, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x0, // @1061 "User Profile"
    0x74, 0x68, 0x65, 0x20, 0x50, 0x49, 0x4e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x0, // @1074 "the PIN code"
    0x34, 0x34, 0x2e, 0x31, 0x2f, 0x34, 0x38, 0x20, 0x6b, 0x48, 0x7a, 0x0, // @1087 "44.1/48 kHz"
    0x38, 0x38, 0x2e, 0x32, 0x2f, 0x39, 0x36, 0x20, 0x6b, 0x48, 0x7a, 0x0, // @1099 "88.2/96 kHz"
    0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x0, // @1111 "Performance"
    0x2, 0x20, 0xb0, 0x43, 0x0, // @1123 "<> ?C"
    0x43, 0x4f, 0x52, 0x45, 0x20, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x0, // @1128 "CORE AUDIO"
    0x48, 0x69, 0x64, 0x65, 0x20, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x0, // @1139 "Hide Input"
    0x50, 0x72, 0x65, 0x76, 0x2e, 0x20, 0x50, 0x61, 0x67, 0x65, 0x0, // @1150 "Prev. Page"
    0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x4f, 0x46, 0x46, 0x0, // @1161 "Screen OFF"
    0x53, 0x6f, 0x66, 0x74, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x0, // @1172 "Soft reset"
    0x4e, 0x65, 0x78, 0x74, 0x20, 0x50, 0x61, 0x67, 0x65, 0x0, // @1183 "Next Page"
    0x4f, 0x66, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x0, // @1193 "Off timer"
    0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x4f, 0x4e, 0x0, // @1203 "Screen ON"
    0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0xa, 0x0, // @1213 "Settings?"
    0x54, 0x52, 0x49, 0x20, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x0, // @1223 "TRI Clock"
    0x2, 0x25, 0x0, // @1233 "<>%"
    0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x0, // @1236 "Settings"
    0x53, 0x68, 0x6f, 0x77, 0x20, 0x4c, 0x6f, 0x67, 0x0, // @1245 "Show Log"
    0x61, 0x6e, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x0, // @1254 "and time"
    0x31, 0x32, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x0, // @1263 "120 min"
    0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x0, // @1271 "Channel"
    0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x0, // @1279 "Display"
    0x4d, 0x75, 0x74, 0x65, 0x20, 0x3a, 0x20, 0x0, // @1287 "Mute : "
    0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0, // @1295 "Service"
    0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x0, // @1303 "Unknown"
    0x31, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x0, // @1311 "10 min"
    0x31, 0x36, 0x20, 0x62, 0x69, 0x74, 0x0, // @1318 "16 bit"
    0x32, 0x34, 0x20, 0x62, 0x69, 0x74, 0x0, // @1325 "24 bit"
    0x33, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x0, // @1332 "30 min"
    0x36, 0x30, 0x20, 0x6d, 0x69, 0x6e, 0x0, // @1339 "60 min"
    0x44, 0x65, 0x2d, 0x45, 0x6d, 0x70, 0x0, // @1346 "De-Emp"
    0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x0, // @1353 "FORMAT"
    0x4b, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x0, // @1360 "Karuna"
    0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x0, // @1367 "VOLUME"
    0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x0, // @1374 "Volume"
    0x31, 0x20, 0x6d, 0x69, 0x6e, 0x0, // @1381 "1 min"
    0x32, 0x34, 0x62, 0x69, 0x74, 0x0, // @1387 "24bit"
    0x35, 0x20, 0x6d, 0x69, 0x6e, 0x0, // @1393 "5 min"
    0x44, 0x49, 0x5f, 0x31, 0x30, 0x0, // @1399 "DI_10"
    0x44, 0x49, 0x5f, 0x31, 0x31, 0x0, // @1405 "DI_11"
    0x44, 0x49, 0x5f, 0x31, 0x32, 0x0, // @1411 "DI_12"
    0x44, 0x49, 0x5f, 0x31, 0x33, 0x0, // @1417 "DI_13"
    0x44, 0x49, 0x5f, 0x31, 0x34, 0x0, // @1423 "DI_14"
    0x44, 0x49, 0x5f, 0x31, 0x35, 0x0, // @1429 "DI_15"
    0x44, 0x65, 0x62, 0x75, 0x67, 0x0, // @1435 "Debug"
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x0, // @1441 "ERROR"
    0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x0, // @1447 "Month"
    0x41, 0x49, 0x5f, 0x30, 0x0, // @1453 "AI_0"
    0x41, 0x49, 0x5f, 0x31, 0x0, // @1458 "AI_1"
    0x41, 0x49, 0x5f, 0x32, 0x0, // @1463 "AI_2"
    0x41, 0x49, 0x5f, 0x33, 0x0, // @1468 "AI_3"
    0x42, 0x61, 0x63, 0x6b, 0x0, // @1473 "Back"
    0x44, 0x49, 0x5f, 0x30, 0x0, // @1478 "DI_0"
    0x44, 0x49, 0x5f, 0x31, 0x0, // @1483 "DI_1"
    0x44, 0x49, 0x5f, 0x32, 0x0, // @1488 "DI_2"
    0x44, 0x49, 0x5f, 0x33, 0x0, // @1493 "DI_3"
    0x44, 0x49, 0x5f, 0x34, 0x0, // @1498 "DI_4"
    0x44, 0x49, 0x5f, 0x35, 0x0, // @1503 "DI_5"
    0x44, 0x49, 0x5f, 0x36, 0x0, // @1508 "DI_6"
    0x44, 0x49, 0x5f, 0x37, 0x0, // @1513 "DI_7"
    0x44, 0x49, 0x5f, 0x38, 0x0, // @1518 "DI_8"
    0x44, 0x49, 0x5f, 0x39, 0x0, // @1523 "DI_9"
    0x44, 0x4f, 0x5f, 0x30, 0x0, // @1528 "DO_0"
    0x44, 0x4f, 0x5f, 0x31, 0x0, // @1533 "DO_1"
    0x44, 0x4f, 0x5f, 0x32, 0x0, // @1538 "DO_2"
    0x44, 0x4f, 0x5f, 0x33, 0x0, // @1543 "DO_3"
    0x44, 0x4f, 0x5f, 0x34, 0x0, // @1548 "DO_4"
    0x44, 0x4f, 0x5f, 0x35, 0x0, // @1553 "DO_5"
    0x44, 0x4f, 0x5f, 0x36, 0x0, // @1558 "DO_6"
    0x44, 0x4f, 0x5f, 0x37, 0x0, // @1563 "DO_7"
    0x46, 0x52, 0x45, 0x51, 0x0, // @1568 "FREQ"
    0x48, 0x6f, 0x75, 0x72, 0x0, // @1573 "Hour"
    0x49, 0x4e, 0x46, 0x4f, 0x0, // @1578 "INFO"
    0x57, 0x41, 0x52, 0x4e, 0x0, // @1583 "WARN"
    0x59, 0x65, 0x61, 0x72, 0x0, // @1588 "Year"
    0x31, 0x30, 0x30, 0x0, // @1593 "100"
    0x44, 0x53, 0x44, 0x0, // @1597 "DSD"
    0x44, 0x61, 0x79, 0x0, // @1601 "Day"
    0x47, 0x55, 0x49, 0x0, // @1605 "GUI"
    0x4d, 0x69, 0x6e, 0x0, // @1609 "Min"
    0x50, 0x43, 0x4d, 0x0, // @1613 "PCM"
    0x53, 0x52, 0x43, 0x0, // @1617 "SRC"
    0x53, 0x65, 0x63, 0x0, // @1621 "Sec"
    0x2d, 0xa, 0x0, // @1625 "-?"
    0x39, 0x35, 0x0, // @1628 "95"
    0x4f, 0x4b, 0x0, // @1631 "OK"
    0x2b, 0x0 // @1634 "+"
};
TEXT_LOCATION_FLASH_PRAGMA
KEEP extern uint32_t const indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

//array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

//Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
