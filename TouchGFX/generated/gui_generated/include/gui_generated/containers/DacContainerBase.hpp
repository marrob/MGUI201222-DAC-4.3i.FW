/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef DACCONTAINERBASE_HPP
#define DACCONTAINERBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/RadioButton.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <gui/containers/UpDownContainer.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/RadioButtonGroup.hpp>

class DacContainerBase : public touchgfx::Container
{
public:
    DacContainerBase();
    virtual ~DacContainerBase() {}
    virtual void initialize();

    /*
     * Virtual Action Handlers
     */
    virtual void OnDSDCutOffValueChanged(uint32_t value)
    {
        // Override and implement this function in DacContainer
    }

    virtual void OnFirValueChanged(uint32_t value)
    {
        // Override and implement this function in DacContainer
    }

    virtual void OnDeEmpValueChanged(uint32_t value)
    {
        // Override and implement this function in DacContainer
    }

    virtual void OnDeltaSigmaValueChanged(uint32_t value)
    {
        // Override and implement this function in DacContainer
    }

    virtual void chbxSwapChanged()
    {
        // Override and implement this function in DacContainer
    }

    virtual void chbxPhaseChanged()
    {
        // Override and implement this function in DacContainer
    }

    virtual void chbxHighPrecChanged()
    {
        // Override and implement this function in DacContainer
    }

    virtual void chbxMuteChanged()
    {
        // Override and implement this function in DacContainer
    }

    virtual void sldrVolumeValueChanged(int value)
    {
        // Override and implement this function in DacContainer
    }

    virtual void chbxEnableSRCChecked()
    {
        // Override and implement this function in DacContainer
    }

    virtual void rdbSRCFreqLowSelected()
    {
        // Override and implement this function in DacContainer
    }

    virtual void rdbSRCFreqMidSelected()
    {
        // Override and implement this function in DacContainer
    }

    virtual void rdbSRCFreqHighSelected()
    {
        // Override and implement this function in DacContainer
    }

    virtual void rdbSRCBit16Selected()
    {
        // Override and implement this function in DacContainer
    }

    virtual void rdbSRCBit24Selected()
    {
        // Override and implement this function in DacContainer
    }

    virtual void btnUserProfileClicked()
    {
        // Override and implement this function in DacContainer
    }

    virtual void btnFactoryProfileClicked()
    {
        // Override and implement this function in DacContainer
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Container containerSRC;
    touchgfx::TextArea lblSRC;
    touchgfx::TextArea lblOutputFreq;
    touchgfx::RadioButton rdbSRCFreqLow;
    touchgfx::TextArea lblLowFreq;
    touchgfx::RadioButton rdbSRCFreqMid;
    touchgfx::TextArea lblMidFreq;
    touchgfx::RadioButton rdbSRCFreqHigh;
    touchgfx::TextArea lblHighFreq;
    touchgfx::TextArea lblOutputBit;
    touchgfx::RadioButton rdbSRCBit16;
    touchgfx::TextArea lbl16Bit;
    touchgfx::RadioButton rdbSRCBit24;
    touchgfx::TextArea lbl24Bit;
    touchgfx::TextArea lblEnableSRC;
    touchgfx::ToggleButton chbxEnableSRC;
    touchgfx::Line lineSRC;
    touchgfx::PainterRGB565 lineSRCPainter;
    touchgfx::Container containerPCM;
    touchgfx::Line linePCM;
    touchgfx::PainterRGB565 linePCMPainter;
    touchgfx::TextArea lblPCM;
    touchgfx::TextArea lblHighPrec;
    touchgfx::ToggleButton chbxHighPrec;
    touchgfx::TextArea lblFIR;
    UpDownContainer nudFIR;
    touchgfx::TextArea lblDeEemp;
    UpDownContainer nudDeEnp;
    touchgfx::TextArea lblDeltaSigm;
    UpDownContainer nudDeltaSigma;
    touchgfx::TextArea lblFirDesc;
    touchgfx::TextArea lblDeltaSigmaDesc;
    touchgfx::TextArea lblDeempDesc;
    touchgfx::Container containerDSD;
    touchgfx::Line lineDSD;
    touchgfx::PainterRGB565 lineDSDPainter;
    UpDownContainer nudDSDCutOff;
    touchgfx::TextArea lblDSDCutOff;
    touchgfx::TextArea lblDSD;
    touchgfx::Container containerAllSettings;
    touchgfx::Line lineChannel;
    touchgfx::PainterRGB565 lineChannelPainter;
    touchgfx::ToggleButton chbxSwap;
    touchgfx::TextArea lblSwap;
    touchgfx::TextArea lblChannel;
    touchgfx::Line linePerformance;
    touchgfx::PainterRGB565 linePerformancePainter;
    touchgfx::TextArea lblPerformance;
    touchgfx::ToggleButton chbxPhase;
    touchgfx::TextArea lblPhase;
    touchgfx::Container containerVolume;
    touchgfx::Line lineVolume;
    touchgfx::PainterRGB565 lineVolumePainter;
    touchgfx::Slider sldrVolume;
    touchgfx::ToggleButton chbxMute;
    touchgfx::TextAreaWithOneWildcard lblVolume;
    touchgfx::TextArea lblVolumeLevel;
    touchgfx::TextArea lblVolumeMute;
    touchgfx::TextArea lblVolumeTitle;
    touchgfx::Container containerFilters;
    touchgfx::Line lineProfie;
    touchgfx::PainterRGB565 lineProfiePainter;
    touchgfx::TextArea lblProfile;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  btnFactoryProfile;
    touchgfx::TextButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  btnUserProfile;
    touchgfx::RadioButtonGroup<3> SRC;
    touchgfx::RadioButtonGroup<2> SRCBitGroup;

    /*
     * Wildcard Buffers
     */
    static const uint16_t LBLVOLUME_SIZE = 10;
    touchgfx::Unicode::UnicodeChar lblVolumeBuffer[LBLVOLUME_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<DacContainerBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<DacContainerBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<DacContainerBase, const touchgfx::Slider&, int> sliderValueChangedCallback;
    touchgfx::Callback<DacContainerBase, const touchgfx::AbstractButton&> radioButtonSelectedCallback;
    touchgfx::Callback<DacContainerBase, uint32_t> nudDSDCutOffValueChangedTriggerCallback;
    touchgfx::Callback<DacContainerBase, uint32_t> nudFIRValueChangedTriggerCallback;
    touchgfx::Callback<DacContainerBase, uint32_t> nudDeEnpValueChangedTriggerCallback;
    touchgfx::Callback<DacContainerBase, uint32_t> nudDeltaSigmaValueChangedTriggerCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);
    void radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src);
    void nudDSDCutOffValueChangedTriggerCallbackHandler(uint32_t value);
    void nudFIRValueChangedTriggerCallbackHandler(uint32_t value);
    void nudDeEnpValueChangedTriggerCallbackHandler(uint32_t value);
    void nudDeltaSigmaValueChangedTriggerCallbackHandler(uint32_t value);

};

#endif // DACCONTAINERBASE_HPP
