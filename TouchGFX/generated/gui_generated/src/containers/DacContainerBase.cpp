/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/DacContainerBase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

DacContainerBase::DacContainerBase() :
    nudDSDCutOffValueChangedTriggerCallback(this, &DacContainerBase::nudDSDCutOffValueChangedTriggerCallbackHandler),
    nudFIRValueChangedTriggerCallback(this, &DacContainerBase::nudFIRValueChangedTriggerCallbackHandler),
    nudDeEnpValueChangedTriggerCallback(this, &DacContainerBase::nudDeEnpValueChangedTriggerCallbackHandler),
    nudDeltaSigmaValueChangedTriggerCallback(this, &DacContainerBase::nudDeltaSigmaValueChangedTriggerCallbackHandler),
    buttonCallback(this, &DacContainerBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &DacContainerBase::sliderValueChangedCallbackHandler),
    radioButtonSelectedCallback(this, &DacContainerBase::radioButtonSelectedCallbackHandler),
    flexButtonCallback(this, &DacContainerBase::flexButtonCallbackHandler)
{
    setWidth(792);
    setHeight(1501);
    containerSRC.setPosition(0, 1159, 792, 342);
    lblSRC.setPosition(15, -1, 294, 44);
    lblSRC.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblSRC.setLinespacing(0);
    lblSRC.setTypedText(touchgfx::TypedText(T___SINGLEUSE_QEB5));
    containerSRC.add(lblSRC);

    lblOutputFreq.setXY(32, 90);
    lblOutputFreq.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblOutputFreq.setLinespacing(0);
    lblOutputFreq.setTypedText(touchgfx::TypedText(T___SINGLEUSE_EZGK));
    containerSRC.add(lblOutputFreq);

    SRC.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
    
    rdbSRCFreqLow.setXY(32, 139);
    rdbSRCFreqLow.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_44X44_ID), touchgfx::Bitmap(BITMAP_ON_44X44_ID), touchgfx::Bitmap(BITMAP_ON_44X44_ID), touchgfx::Bitmap(BITMAP_OFF_44X44_ID));
    rdbSRCFreqLow.setSelected(true);
    rdbSRCFreqLow.setDeselectionEnabled(false);
    SRC.add(rdbSRCFreqLow);
    containerSRC.add(rdbSRCFreqLow);

    lblLowFreq.setXY(87, 139);
    lblLowFreq.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblLowFreq.setLinespacing(0);
    lblLowFreq.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OTL7));
    containerSRC.add(lblLowFreq);

    rdbSRCFreqMid.setXY(283, 139);
    rdbSRCFreqMid.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_44X44_ID), touchgfx::Bitmap(BITMAP_ON_44X44_ID), touchgfx::Bitmap(BITMAP_ON_44X44_ID), touchgfx::Bitmap(BITMAP_OFF_44X44_ID));
    rdbSRCFreqMid.setSelected(false);
    rdbSRCFreqMid.setDeselectionEnabled(false);
    SRC.add(rdbSRCFreqMid);
    containerSRC.add(rdbSRCFreqMid);

    lblMidFreq.setXY(338, 139);
    lblMidFreq.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblMidFreq.setLinespacing(0);
    lblMidFreq.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7PLI));
    containerSRC.add(lblMidFreq);

    rdbSRCFreqHigh.setXY(538, 139);
    rdbSRCFreqHigh.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_44X44_ID), touchgfx::Bitmap(BITMAP_ON_44X44_ID), touchgfx::Bitmap(BITMAP_ON_44X44_ID), touchgfx::Bitmap(BITMAP_OFF_44X44_ID));
    rdbSRCFreqHigh.setSelected(false);
    rdbSRCFreqHigh.setDeselectionEnabled(false);
    SRC.add(rdbSRCFreqHigh);
    containerSRC.add(rdbSRCFreqHigh);

    lblHighFreq.setXY(593, 139);
    lblHighFreq.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblHighFreq.setLinespacing(0);
    lblHighFreq.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NVL7));
    containerSRC.add(lblHighFreq);

    lblOutputBit.setXY(31, 197);
    lblOutputBit.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblOutputBit.setLinespacing(0);
    lblOutputBit.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HVM1));
    containerSRC.add(lblOutputBit);

    SRCBitGroup.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
    
    rdbSRCBit16.setXY(31, 246);
    rdbSRCBit16.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_44X44_ID), touchgfx::Bitmap(BITMAP_ON_44X44_ID), touchgfx::Bitmap(BITMAP_ON_44X44_ID), touchgfx::Bitmap(BITMAP_OFF_44X44_ID));
    rdbSRCBit16.setSelected(true);
    rdbSRCBit16.setDeselectionEnabled(false);
    SRCBitGroup.add(rdbSRCBit16);
    containerSRC.add(rdbSRCBit16);

    lbl16Bit.setXY(86, 246);
    lbl16Bit.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lbl16Bit.setLinespacing(0);
    lbl16Bit.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4ETD));
    containerSRC.add(lbl16Bit);

    rdbSRCBit24.setXY(283, 246);
    rdbSRCBit24.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_44X44_ID), touchgfx::Bitmap(BITMAP_ON_44X44_ID), touchgfx::Bitmap(BITMAP_ON_44X44_ID), touchgfx::Bitmap(BITMAP_OFF_44X44_ID));
    rdbSRCBit24.setSelected(false);
    rdbSRCBit24.setDeselectionEnabled(false);
    SRCBitGroup.add(rdbSRCBit24);
    containerSRC.add(rdbSRCBit24);

    lbl24Bit.setXY(338, 246);
    lbl24Bit.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lbl24Bit.setLinespacing(0);
    lbl24Bit.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RUFG));
    containerSRC.add(lbl24Bit);

    lblEnableSRC.setXY(32, 43);
    lblEnableSRC.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblEnableSRC.setLinespacing(0);
    lblEnableSRC.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JH90));
    containerSRC.add(lblEnableSRC);

    chbxEnableSRC.setXY(283, 43);
    chbxEnableSRC.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_44X44_ID), touchgfx::Bitmap(BITMAP_ON_44X44_ID));
    chbxEnableSRC.setAction(buttonCallback);
    containerSRC.add(chbxEnableSRC);

    lineSRC.setPosition(43, 321, 710, 15);
    lineSRCPainter.setColor(touchgfx::Color::getColorFromRGB(64, 64, 64));
    lineSRC.setPainter(lineSRCPainter);
    lineSRC.setStart(0, 0);
    lineSRC.setEnd(920, 1);
    lineSRC.setLineWidth(2);
    lineSRC.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    containerSRC.add(lineSRC);

    add(containerSRC);

    containerPCM.setPosition(0, 663, 792, 495);
    linePCM.setPosition(45, 481, 710, 15);
    linePCMPainter.setColor(touchgfx::Color::getColorFromRGB(64, 64, 64));
    linePCM.setPainter(linePCMPainter);
    linePCM.setStart(0, 0);
    linePCM.setEnd(920, 1);
    linePCM.setLineWidth(2);
    linePCM.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    containerPCM.add(linePCM);

    lblPCM.setPosition(15, 0, 294, 44);
    lblPCM.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblPCM.setLinespacing(0);
    lblPCM.setTypedText(touchgfx::TypedText(T___SINGLEUSE_46CJ));
    containerPCM.add(lblPCM);

    lblHighPrec.setXY(32, 44);
    lblHighPrec.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblHighPrec.setLinespacing(0);
    lblHighPrec.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GVR4));
    containerPCM.add(lblHighPrec);

    chbxHighPrec.setXY(564, 15);
    chbxHighPrec.setBitmaps(touchgfx::Bitmap(BITMAP_HIGHPRECOFF_ID), touchgfx::Bitmap(BITMAP_HIGHPRECON_ID));
    chbxHighPrec.setAction(buttonCallback);
    containerPCM.add(chbxHighPrec);

    lblFIR.setXY(32, 123);
    lblFIR.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblFIR.setLinespacing(0);
    lblFIR.setTypedText(touchgfx::TypedText(T___SINGLEUSE_A6Y0));
    containerPCM.add(lblFIR);

    nudFIR.setXY(506, 116);
    nudFIR.setValueChangedTriggerCallback(nudFIRValueChangedTriggerCallback);
    containerPCM.add(nudFIR);

    lblDeEemp.setXY(32, 246);
    lblDeEemp.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblDeEemp.setLinespacing(0);
    lblDeEemp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_4A5B));
    containerPCM.add(lblDeEemp);

    nudDeEnp.setXY(506, 239);
    nudDeEnp.setValueChangedTriggerCallback(nudDeEnpValueChangedTriggerCallback);
    containerPCM.add(nudDeEnp);

    lblDeltaSigm.setXY(31, 373);
    lblDeltaSigm.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblDeltaSigm.setLinespacing(0);
    lblDeltaSigm.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UEM5));
    containerPCM.add(lblDeltaSigm);

    nudDeltaSigma.setXY(505, 366);
    nudDeltaSigma.setValueChangedTriggerCallback(nudDeltaSigmaValueChangedTriggerCallback);
    containerPCM.add(nudDeltaSigma);

    lblFirDesc.setPosition(32, 170, 618, 41);
    lblFirDesc.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblFirDesc.setLinespacing(0);
    lblFirDesc.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CBB4));
    containerPCM.add(lblFirDesc);

    lblDeltaSigmaDesc.setPosition(31, 419, 618, 41);
    lblDeltaSigmaDesc.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblDeltaSigmaDesc.setLinespacing(0);
    lblDeltaSigmaDesc.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CGEQ));
    containerPCM.add(lblDeltaSigmaDesc);

    lblDeempDesc.setPosition(32, 295, 618, 41);
    lblDeempDesc.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblDeempDesc.setLinespacing(0);
    lblDeempDesc.setTypedText(touchgfx::TypedText(T___SINGLEUSE_J09Y));
    containerPCM.add(lblDeempDesc);

    add(containerPCM);

    containerDSD.setPosition(0, 539, 792, 124);
    lineDSD.setPosition(45, 109, 710, 15);
    lineDSDPainter.setColor(touchgfx::Color::getColorFromRGB(64, 64, 64));
    lineDSD.setPainter(lineDSDPainter);
    lineDSD.setStart(0, 0);
    lineDSD.setEnd(920, 1);
    lineDSD.setLineWidth(2);
    lineDSD.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    containerDSD.add(lineDSD);

    nudDSDCutOff.setXY(506, 38);
    nudDSDCutOff.setValueChangedTriggerCallback(nudDSDCutOffValueChangedTriggerCallback);
    containerDSD.add(nudDSDCutOff);

    lblDSDCutOff.setXY(32, 45);
    lblDSDCutOff.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblDSDCutOff.setLinespacing(0);
    lblDSDCutOff.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GO88));
    containerDSD.add(lblDSDCutOff);

    lblDSD.setPosition(15, 0, 294, 44);
    lblDSD.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblDSD.setLinespacing(0);
    lblDSD.setTypedText(touchgfx::TypedText(T___SINGLEUSE_D1OG));
    containerDSD.add(lblDSD);

    add(containerDSD);

    containerAllSettings.setPosition(0, 289, 792, 250);
    lineChannel.setPosition(45, 111, 710, 15);
    lineChannelPainter.setColor(touchgfx::Color::getColorFromRGB(64, 64, 64));
    lineChannel.setPainter(lineChannelPainter);
    lineChannel.setStart(0, 0);
    lineChannel.setEnd(920, 1);
    lineChannel.setLineWidth(2);
    lineChannel.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    containerAllSettings.add(lineChannel);

    chbxSwap.setXY(565, 21);
    chbxSwap.setBitmaps(touchgfx::Bitmap(BITMAP_SWAPOFF_ID), touchgfx::Bitmap(BITMAP_SWAPON_ID));
    chbxSwap.setAction(buttonCallback);
    containerAllSettings.add(chbxSwap);

    lblSwap.setXY(32, 46);
    lblSwap.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblSwap.setLinespacing(0);
    lblSwap.setTypedText(touchgfx::TypedText(T___SINGLEUSE_12IE));
    containerAllSettings.add(lblSwap);

    lblChannel.setPosition(15, 2, 294, 44);
    lblChannel.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblChannel.setLinespacing(0);
    lblChannel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7IGM));
    containerAllSettings.add(lblChannel);

    linePerformance.setPosition(45, 235, 710, 15);
    linePerformancePainter.setColor(touchgfx::Color::getColorFromRGB(64, 64, 64));
    linePerformance.setPainter(linePerformancePainter);
    linePerformance.setStart(0, 0);
    linePerformance.setEnd(920, 1);
    linePerformance.setLineWidth(2);
    linePerformance.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    containerAllSettings.add(linePerformance);

    lblPerformance.setPosition(15, 126, 294, 44);
    lblPerformance.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblPerformance.setLinespacing(0);
    lblPerformance.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CBHE));
    containerAllSettings.add(lblPerformance);

    chbxPhase.setXY(563, 137);
    chbxPhase.setBitmaps(touchgfx::Bitmap(BITMAP_PHASEOFF_ID), touchgfx::Bitmap(BITMAP_PHASEON_ID));
    chbxPhase.setAction(buttonCallback);
    containerAllSettings.add(chbxPhase);

    lblPhase.setXY(32, 170);
    lblPhase.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblPhase.setLinespacing(0);
    lblPhase.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9T0G));
    containerAllSettings.add(lblPhase);

    add(containerAllSettings);

    containerVolume.setPosition(0, 150, 792, 141);
    lineVolume.setPosition(45, 126, 710, 15);
    lineVolumePainter.setColor(touchgfx::Color::getColorFromRGB(64, 64, 64));
    lineVolume.setPainter(lineVolumePainter);
    lineVolume.setStart(0, 0);
    lineVolume.setEnd(920, 1);
    lineVolume.setLineWidth(2);
    lineVolume.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    containerVolume.add(lineVolume);

    sldrVolume.setXY(24, 67);
    sldrVolume.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDER_930_ID), touchgfx::Bitmap(BITMAP_SLIDER_930_ID), touchgfx::Bitmap(BITMAP_ON_44X44_ID));
    sldrVolume.setupHorizontalSlider(2, 16, 0, 0, 688);
    sldrVolume.setValueRange(0, 100);
    sldrVolume.setValue(100);
    sldrVolume.setNewValueCallback(sliderValueChangedCallback);
    containerVolume.add(sldrVolume);

    chbxMute.setXY(711, 2);
    chbxMute.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_44X44_ID), touchgfx::Bitmap(BITMAP_ON_44X44_ID));
    chbxMute.setAction(buttonCallback);
    containerVolume.add(chbxMute);

    lblVolume.setPosition(215, 40, 77, 44);
    lblVolume.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblVolume.setLinespacing(0);
    Unicode::snprintf(lblVolumeBuffer, LBLVOLUME_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_QCK7).getText());
    lblVolume.setWildcard(lblVolumeBuffer);
    lblVolume.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HVH6));
    containerVolume.add(lblVolume);

    lblVolumeLevel.setPosition(32, 40, 184, 44);
    lblVolumeLevel.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblVolumeLevel.setLinespacing(0);
    lblVolumeLevel.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ZAYX));
    containerVolume.add(lblVolumeLevel);

    lblVolumeMute.setPosition(629, 3, 82, 44);
    lblVolumeMute.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblVolumeMute.setLinespacing(0);
    lblVolumeMute.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HTO2));
    containerVolume.add(lblVolumeMute);

    lblVolumeTitle.setPosition(15, 3, 135, 37);
    lblVolumeTitle.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblVolumeTitle.setLinespacing(0);
    lblVolumeTitle.setTypedText(touchgfx::TypedText(T___SINGLEUSE_DRWF));
    containerVolume.add(lblVolumeTitle);

    add(containerVolume);

    containerFilters.setPosition(0, 0, 792, 150);
    lineProfie.setPosition(45, 142, 710, 15);
    lineProfiePainter.setColor(touchgfx::Color::getColorFromRGB(64, 64, 64));
    lineProfie.setPainter(lineProfiePainter);
    lineProfie.setStart(0, 0);
    lineProfie.setEnd(920, 1);
    lineProfie.setLineWidth(2);
    lineProfie.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
    containerFilters.add(lineProfie);

    lblProfile.setPosition(15, 6, 166, 36);
    lblProfile.setColor(touchgfx::Color::getColorFromRGB(200, 200, 200));
    lblProfile.setLinespacing(0);
    lblProfile.setTypedText(touchgfx::TypedText(T___SINGLEUSE_WKT5));
    containerFilters.add(lblProfile);

    btnFactoryProfile.setBoxWithBorderPosition(0, 0, 350, 72);
    btnFactoryProfile.setBorderSize(1);
    btnFactoryProfile.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 0, 0), touchgfx::Color::getColorFromRGB(32, 32, 32), touchgfx::Color::getColorFromRGB(100, 100, 100), touchgfx::Color::getColorFromRGB(100, 100, 100));
    btnFactoryProfile.setText(TypedText(T___SINGLEUSE_5U3A));
    btnFactoryProfile.setTextPosition(0, 20, 350, 72);
    btnFactoryProfile.setTextColors(touchgfx::Color::getColorFromRGB(150, 118, 73), touchgfx::Color::getColorFromRGB(64, 64, 64));
    btnFactoryProfile.setAction(flexButtonCallback);
    btnFactoryProfile.setPosition(31, 51, 350, 72);
    containerFilters.add(btnFactoryProfile);

    btnUserProfile.setBoxWithBorderPosition(0, 0, 350, 72);
    btnUserProfile.setBorderSize(1);
    btnUserProfile.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 0, 0), touchgfx::Color::getColorFromRGB(32, 32, 32), touchgfx::Color::getColorFromRGB(100, 100, 100), touchgfx::Color::getColorFromRGB(100, 100, 100));
    btnUserProfile.setText(TypedText(T___SINGLEUSE_8MP9));
    btnUserProfile.setTextPosition(0, 20, 350, 72);
    btnUserProfile.setTextColors(touchgfx::Color::getColorFromRGB(150, 118, 73), touchgfx::Color::getColorFromRGB(64, 64, 64));
    btnUserProfile.setVisible(false);
    btnUserProfile.setAction(flexButtonCallback);
    btnUserProfile.setPosition(405, 51, 350, 72);
    containerFilters.add(btnUserProfile);

    add(containerFilters);
}

DacContainerBase::~DacContainerBase()
{

}

void DacContainerBase::initialize()
{
    nudFIR.initialize();
    nudDeEnp.initialize();
    nudDeltaSigma.initialize();
    nudDSDCutOff.initialize();
}

void DacContainerBase::nudDSDCutOffValueChangedTriggerCallbackHandler(uint32_t value)
{
    //DSDCutOffValueChanged
    //When nudDSDCutOff ValueChangedTrigger call virtual function
    //Call OnDSDCutOffValueChanged
    OnDSDCutOffValueChanged(value);
}

void DacContainerBase::nudFIRValueChangedTriggerCallbackHandler(uint32_t value)
{
    //FirValueChanged
    //When nudFIR ValueChangedTrigger call virtual function
    //Call OnFirValueChanged
    OnFirValueChanged(value);
}

void DacContainerBase::nudDeEnpValueChangedTriggerCallbackHandler(uint32_t value)
{
    //DeEmpValueChanged
    //When nudDeEnp ValueChangedTrigger call virtual function
    //Call OnDeEmpValueChanged
    OnDeEmpValueChanged(value);
}

void DacContainerBase::nudDeltaSigmaValueChangedTriggerCallbackHandler(uint32_t value)
{
    //DeltaSigmaValueChanged
    //When nudDeltaSigma ValueChangedTrigger call virtual function
    //Call OnDeltaSigmaValueChanged
    OnDeltaSigmaValueChanged(value);
}

void DacContainerBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &chbxSwap)
    {
        //SwapLRChanged
        //When chbxSwap clicked call virtual function
        //Call chbxSwapChanged
        chbxSwapChanged();
    }
    if (&src == &chbxPhase)
    {
        //PhaseChanged
        //When chbxPhase clicked call virtual function
        //Call chbxPhaseChanged
        chbxPhaseChanged();
    }
    if (&src == &chbxHighPrec)
    {
        //HighPrecChanged
        //When chbxHighPrec clicked call virtual function
        //Call chbxHighPrecChanged
        chbxHighPrecChanged();
    }
    if (&src == &chbxMute)
    {
        //MuteChenged
        //When chbxMute clicked call virtual function
        //Call chbxMuteChanged
        chbxMuteChanged();
    }
    if (&src == &chbxEnableSRC)
    {
        //EnableSRC
        //When chbxEnableSRC clicked call virtual function
        //Call chbxEnableSRCChecked
        chbxEnableSRCChecked();
    }
}

void DacContainerBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &sldrVolume)
    {
        //VolumeValueChanged
        //When sldrVolume value changed call virtual function
        //Call sldrVolumeValueChanged
        sldrVolumeValueChanged(value);
    }
}

void DacContainerBase::radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &rdbSRCFreqLow)
    {
        //SRCFreqLowSelected
        //When rdbSRCFreqLow selected call virtual function
        //Call rdbSRCFreqLowSelected
        rdbSRCFreqLowSelected();
    }
    if (&src == &rdbSRCFreqMid)
    {
        //SRCFreqMidSelected
        //When rdbSRCFreqMid selected call virtual function
        //Call rdbSRCFreqMidSelected
        rdbSRCFreqMidSelected();
    }
    if (&src == &rdbSRCFreqHigh)
    {
        //SRCFreqHighSelected
        //When rdbSRCFreqHigh selected call virtual function
        //Call rdbSRCFreqHighSelected
        rdbSRCFreqHighSelected();
    }
    if (&src == &rdbSRCBit16)
    {
        //SRCBit16Selected
        //When rdbSRCBit16 selected call virtual function
        //Call rdbSRCBit16Selected
        rdbSRCBit16Selected();
    }
    if (&src == &rdbSRCBit24)
    {
        //SRCBit24Selected
        //When rdbSRCBit24 selected call virtual function
        //Call rdbSRCBit24Selected
        rdbSRCBit24Selected();
    }
}

void DacContainerBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &btnUserProfile)
    {
        //UserProfileClicked
        //When btnUserProfile clicked call virtual function
        //Call btnUserProfileClicked
        btnUserProfileClicked();
    }
    if (&src == &btnFactoryProfile)
    {
        //FactoryProfileClicked
        //When btnFactoryProfile clicked call virtual function
        //Call btnFactoryProfileClicked
        btnFactoryProfileClicked();
    }
}
